
Description: Create a CodePipeline to include Nested CloudFormation, CodeBuild and Approval steps.

Parameters:
  S3Artifact:
    Type: String
    Description: Namme of the bucket we created in the pipeline deployment
    NoEcho: true

Resources:
  LambdaForCloudFormation:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaForCloudFormation
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        -
          PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
        -
          PolicyName: ManageUserPoolDomain
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:CreateUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DeleteUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'
        -
          PolicyName: InvokeLambdaFunction
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 'arn:aws:lambda:*:*:function:*'
                
  DynamoTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "userId"
          AttributeType: "S"
        - 
          AttributeName: "noteId"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      TableName:
        Fn::Sub: ${AWS::StackName}
      KeySchema: 
        - 
          AttributeName: "userId"
          KeyType: "HASH"
        - 
          AttributeName: "noteId"
          KeyType: "RANGE"
      Tags:
        - Key: Project
          Value: Notes

  NoteStoreS3Location:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedMethods:
              - PUT
            AllowedMethods:
              - POST
            AllowedMethods:
              - HEAD
            AllowedMethods:
              - DELETE
            AllowedOrigins:
              - "*"
            MaxAge: "3000"
    
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub User-Pool-${AWS::StackName}
      AutoVerifiedAttributes:
        - email
      # SmsConfiguration:
      #   ExternalId: !Sub ${AuthName}-external
      #   SnsCallerArn: !GetAtt SNSRole.Arn
      UsernameAttributes: 
        - email
  
  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub app-${AWS::StackName}
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows: 
        - ADMIN_NO_SRP_AUTH

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${AuthName}Identity
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  CloudFormationCognitoUserPoolDomain:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CloudFormationCognitoUserPoolDomain
      Runtime: nodejs8.10
      Code: 
        S3Bucket: !Ref S3Artifact
        S3Key: "CloudFormationCognitoUserPoolDomain.zip"
      Handler: CloudFormationCognitoUserPoolDomain.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
    DependsOn: CloudFormationSendResponse

  CloudFormationSendResponse:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CloudFormationSendResponse
      Runtime: nodejs8.10
      Code: 
        S3Bucket: !Ref S3Artifact
        S3Key: "CloudFormationSendResponse.zip"
      Handler: index.handler
      Role: !GetAtt LambdaForCloudFormation.Arn
      
  UserPoolTestDomain:
    Type: Custom::CognitoUserPoolDomain
    Properties:
      ServiceToken: !GetAtt CloudFormationCognitoUserPoolDomain.Arn
      UserPoolId: !Ref UserPool
      # THIS MUST BE GLOBALLY UNIQUE
      Domain: make-notes

  # CloudFormationCognitoUserPoolClientSettings:
  #   Type: 'AWS::Lambda::Function'
  #   Properties:
  #     FunctionName: CloudFormationCognitoUserPoolClientSettings
  #     Runtime: nodejs8.10
  #     Code: ./CloudFormationCognitoUserPoolClientSettings.js
  #     Handler: CloudFormationCognitoUserPoolClientSettings.handler
  #     Role: !GetAtt LambdaForCloudFormation.Arn
  #   DependsOn: CloudFormationSendResponse

  # UserPoolTestClientSettings:
  #   Type: 'Custom::CognitoUserPoolClientSettings'
  #   Properties:
  #     ServiceToken: !GetAtt CloudFormationCognitoUserPoolClientSettings.Arn
  #     UserPoolId: !Ref UserPoolTest
  #     UserPoolClientId: !Ref UserPoolTestClient
  #     SupportedIdentityProviders:
  #       - COGNITO
  #     CallbackURL: 'https://www.amazon.com'
  #     LogoutURL: 'https://www.google.com'
  #     AllowedOAuthFlowsUserPoolClient: true
  #     AllowedOAuthFlows:
  #       - code
  #     AllowedOAuthScopes:
  #       - openid